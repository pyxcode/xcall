#!/usr/bin/env python3
"""
Script pour extraire UNIQUEMENT les vraies donn√©es des analyses GPT
Aucune donn√©e invent√©e, simul√©e ou g√©n√©r√©e
"""

import os
import json
from datetime import datetime
from collections import Counter

def get_real_analyses():
    """R√©cup√®re toutes les vraies analyses existantes (fichiers consolid√©s par jour)"""
    real_analyses = []
    
    if not os.path.exists("analyses"):
        print("‚ùå Dossier 'analyses' non trouv√©")
        return []
    
    for file in os.listdir("analyses"):
        # Nouveau format : analyses_YYYY-MM-DD.json (fichiers consolid√©s)
        if file.startswith("analyses_") and file.endswith(".json"):
            try:
                with open(f"analyses/{file}", 'r', encoding='utf-8') as f:
                    daily_analyses = json.load(f)
                    # daily_analyses est une liste d'analyses pour ce jour
                    real_analyses.extend(daily_analyses)
            except Exception as e:
                print(f"‚ùå Erreur lecture {file}: {e}")
        
        # Ancien format : call_XXX_YYYY-MM-DD.json (pour compatibilit√©)
        elif file.startswith("call_") and file.endswith(".json"):
            try:
                with open(f"analyses/{file}", 'r', encoding='utf-8') as f:
                    analysis = json.load(f)
                    real_analyses.append(analysis)
            except Exception as e:
                print(f"‚ùå Erreur lecture {file}: {e}")
    
    return real_analyses

def extract_all_real_data(analyses):
    """Extrait TOUTES les donn√©es r√©elles des analyses"""
    if not analyses:
        return None
    
    # Scores r√©els
    real_scores = []
    real_assignees = []
    real_assignee_scores = {}  # Pour lier assign√© √† son score
    
    for analysis in analyses:
        try:
            score_str = analysis.get("mood_global", "0").replace("/10", "").strip()
            if score_str.isdigit():
                score = int(score_str)
                real_scores.append(score)
                
                assignee = analysis.get("assignee_name", "Unknown")
                if assignee not in real_assignees:
                    real_assignees.append(assignee)
                    real_assignee_scores[assignee] = score
        except:
            pass
    
    # Am√©liorations r√©elles
    real_improvements = []
    for analysis in analyses:
        improvements = analysis.get("ameliorations", [])
        real_improvements.extend(improvements)
    
    # Blocages r√©els
    real_blockers = []
    for analysis in analyses:
        blockers = analysis.get("blocages_client", [])
        real_blockers.extend(blockers)
    
    # Arguments r√©ussis r√©els
    real_successful_args = []
    for analysis in analyses:
        successful_args = analysis.get("arguments_reussis", [])
        real_successful_args.extend(successful_args)
    
    # Arguments non r√©ussis r√©els
    real_failed_args = []
    for analysis in analyses:
        failed_args = analysis.get("arguments_non_reussis", [])
        real_failed_args.extend(failed_args)
    
    return {
        "scores": real_scores,
        "assignees": real_assignees,
        "assignee_scores": real_assignee_scores,
        "improvements": real_improvements,
        "blockers": real_blockers,
        "successful_args": real_successful_args,
        "failed_args": real_failed_args,
        "total_calls": len(analyses)
    }

def calculate_average_progression(data):
    """Calcule la progression moyenne bas√©e sur les vraies donn√©es"""
    if data["total_calls"] < 2:
        return 0  # Pas assez de donn√©es pour calculer une progression
    
    # Pour l'instant, avec une seule analyse, on ne peut pas calculer de progression
    # Quand il y aura plus d'analyses, on pourra comparer les scores dans le temps
    return 0

def calculate_best_progression(data):
    """Calcule la meilleure progression bas√©e sur les vraies donn√©es"""
    if data["total_calls"] < 2:
        return {"name": "", "progression": 0}  # Pas assez de donn√©es
    
    # Pour l'instant, avec une seule analyse, on ne peut pas calculer de progression
    # Quand il y aura plus d'analyses, on pourra identifier qui progresse le plus
    return {"name": "", "progression": 0}



def generate_real_only_dashboard():
    """G√©n√®re le dashboard avec UNIQUEMENT les vraies donn√©es extraites"""
    
    print("üîÑ Extraction des vraies donn√©es des analyses...")
    
    # R√©cup√©rer les vraies analyses
    real_analyses = get_real_analyses()
    
    if not real_analyses:
        print("‚ùå Aucune analyse r√©elle trouv√©e")
        return None
    
    print(f"üìä {len(real_analyses)} analyses r√©elles trouv√©es")
    
    # Extraire toutes les donn√©es r√©elles
    data = extract_all_real_data(real_analyses)
    
    if not data:
        print("‚ùå Impossible d'extraire les donn√©es")
        return None
    
    # Calculer les moyennes r√©elles
    avg_score = sum(data["scores"]) / len(data["scores"]) if data["scores"] else 0
    
    
    # Classement hebdo UNIQUEMENT avec les vrais assign√©s et leurs vrais scores
    real_leaderboard = []
    for i, (assignee, score) in enumerate(data["assignee_scores"].items()):
        real_leaderboard.append({
            "rank": i + 1,
            "name": assignee,
            "score": score,
            "delta": 0,  # Pas de donn√©es historiques
            "feedback": ""  # Pas de feedback invent√©
        })
    
    # Trier par score d√©croissant
    real_leaderboard.sort(key=lambda x: x["score"], reverse=True)
    for i, agent in enumerate(real_leaderboard):
        agent["rank"] = i + 1
    
    # Blocages r√©els avec occurrences r√©elles
    main_blockers = []
    if data["blockers"]:
        blocker_counts = Counter(data["blockers"])
        main_blockers = [
            {"label": blocker, "occurrences": count}
            for blocker, count in blocker_counts.most_common(10)
        ]
    
    # Arguments efficaces r√©els avec calcul de success rate correct
    effective_arguments = []
    if data["successful_args"]:
        # Compter les arguments r√©ussis
        successful_counts = Counter(data["successful_args"])
        
        # Compter les arguments non r√©ussis (tentatives √©chou√©es)
        failed_counts = Counter(data["failed_args"])
        
        # Pour chaque argument r√©ussi, calculer le vrai success rate
        for arg, success_count in successful_counts.most_common(10):
            # Nombre de fois o√π cet argument a √©chou√©
            failed_count = failed_counts.get(arg, 0)
            
            # Nombre total de tentatives (succ√®s + √©checs)
            total_attempts = success_count + failed_count
            
            # Vrai success rate : succ√®s / tentatives
            if total_attempts > 0:
                success_rate = round((success_count / total_attempts) * 100)
                
                effective_arguments.append({
                    "argument": arg,
                    "success_rate": f"{success_rate}%",
                    "context_sample": f"{success_count} succ√®s sur {total_attempts} tentatives"
                })
            else:
                # Si pas d'√©checs enregistr√©s, on assume que c'est 100% de succ√®s
                effective_arguments.append({
                    "argument": arg,
                    "success_rate": "100%",
                    "context_sample": f"{success_count} succ√®s (pas d'√©checs enregistr√©s)"
                })
    
    # Arguments non efficaces r√©els
    failed_arguments = []
    if data["failed_args"]:
        failed_counts = Counter(data["failed_args"])
        for arg, count in failed_counts.most_common(5):
            failed_arguments.append({
                "argument": arg,
                "failure_rate": "100%",  # Bas√© sur analyse r√©elle
                "context_sample": f"√âchou√© {count} fois"
            })
    
    # Am√©liorations r√©elles
    suggested_improvements = []
    if data["improvements"]:
        improvement_counts = Counter(data["improvements"])
        for improvement, count in improvement_counts.most_common(10):
            suggested_improvements.append({
                "improvement": improvement,
                "linked_to": f"Sugg√©r√© {count} fois par GPT"
            })
    
    # Donn√©es dashboard 100% r√©elles
    dashboard_data = {
        # Performance collective (vraies donn√©es uniquement)
        "averageScore7Days": round(avg_score, 1),
        "averageScorePrevious7Days": 0,  # Pas de donn√©es historiques
        "callsCount7Days": data["total_calls"],
        "callsCountPrevious7Days": 0,  # Pas de donn√©es historiques
        
        # Classement hebdo (vraies donn√©es uniquement)
        "weeklyLeaderboard": real_leaderboard,
        
        # Graphique 30 jours (vide car pas de donn√©es historiques)
        "dailyScores": {},
        
        # Insights de la semaine (vraies donn√©es uniquement)
        "mainBlockers": main_blockers,
        "unresolvedBlockers": [],  # Pas de donn√©es historiques
        "effectiveArguments": effective_arguments,
        "failedArguments": failed_arguments,
        "suggestedImprovements": suggested_improvements,
        
        # M√©triques de progression (calcul√©es √† partir des vraies donn√©es)
        "averageProgression": calculate_average_progression(data),
        "bestProgression": calculate_best_progression(data),
        
        # M√©tadonn√©es
        "lastUpdated": datetime.now().strftime('%Y-%m-%d %H:%M'),
        "dataSource": "100% Donn√©es extraites des analyses GPT",
        "realCallsCount": data["total_calls"],
        "realAssigneesCount": len(data["assignees"]),
        "realBlockersCount": len(data["blockers"]),
        "realArgumentsCount": len(data["successful_args"]),
        "realImprovementsCount": len(data["improvements"]),
        "isRealExtractedData": True
    }
    
    return dashboard_data

def save_real_extracted_data():
    """Sauvegarde les donn√©es 100% r√©elles extraites"""
    data = generate_real_only_dashboard()
    
    if not data:
        print("‚ùå Impossible de g√©n√©rer les donn√©es")
        return False
    
    with open("dashboard_data.json", 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=2, ensure_ascii=False)
    
    print("‚úÖ Donn√©es 100% r√©elles extraites et sauvegard√©es")
    print(f"üìä {data['realCallsCount']} appels r√©els analys√©s")
    print(f"üéØ Score moyen r√©el: {data['averageScore7Days']}/10")
    print(f"üë• {data['realAssigneesCount']} assign√©s r√©els")
    print(f"üöß {data['realBlockersCount']} blocages identifi√©s")
    print(f"‚úÖ {data['realArgumentsCount']} arguments efficaces")
    print(f"üí° {data['realImprovementsCount']} am√©liorations sugg√©r√©es")
    
    return True

if __name__ == "__main__":
    print("=" * 60)
    print("üéØ CallX - Extraction de Donn√©es 100% R√©elles")
    print("=" * 60)
    
    success = save_real_extracted_data()
    
    if success:
        print("\n‚úÖ Dashboard configur√© avec UNIQUEMENT des donn√©es r√©elles extraites")
        print("üåê Ouvrez http://localhost:3001/dashboard pour voir les r√©sultats")
        print("\nüí° Pour plus de donn√©es:")
        print("   1. Faites plus d'appels avec Aircall")
        print("   2. Lancez: python Xcall.py")
        print("   3. Lancez: python generate_real_extracted_data.py")
    else:
        print("\n‚ùå √âchec de l'extraction")
        print("üîß V√©rifiez que vous avez des analyses dans le dossier 'analyses/'")
    
    print("=" * 60)
